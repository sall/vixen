<#@ template language="C#" debug="true" #>
<#@ assembly name="Vixen.dll" #>
<#@ import namespace="Vixen.Sys" #>
<#@ import namespace="Vixen.Module.Effect" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Common.ValueTypes" #>

<#@ import namespace="System.Collections.Generic" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="Microsoft.CSharp" #>
/*
This File is dynamically generated by Vixen 3 every time the script is run and compiled.  
Changes made to this file WILL BE LOST every time the script is run so DO NOT MODIFY this file!
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Dynamic;
using Vixen.Sys;
using Vixen.Module.SequenceType;
using Vixen.Module.Effect;
using Vixen.Module.Script;
using Vixen.Commands;
using ValueTypes=Common.ValueTypes ;

namespace <#=Namespace#> {
	public partial class <#=ClassName#> : UserScriptHost {
		private UserScriptNode[] _nodes;
		// Effect name : Effect type id
		private Dictionary<string, Guid> _effects = new Dictionary<string, Guid>();

		public <#=ClassName#>() {
			_nodes = VixenSystem.Nodes.Select(x => new UserScriptNode(x)).ToArray();
<#
	foreach(string effectName in Effects.Keys) {
#>
			_effects["<#=effectName#>"] = new Guid("<#= Effects[effectName].TypeId#>");
<# } #>		
		}

		public void PreRenderEffect(EffectNode effectNode) {
			if(effectNode != null) {
				effectNode.Effect.PreRender();
			}
		}

		public void PreRenderEffects(IEnumerable<EffectNode> effectNodes) {
			if(effectNodes != null) {
				effectNodes.AsParallel().ForAll(x => x.Effect.PreRender());
			}
		}

		public void Execute(EffectNode effectNode) {
			if(effectNode != null) {
				Sequence.InsertData(effectNode);
			}
		}

		public void Execute(IEnumerable<EffectNode> effectNodes) {
			if(effectNodes != null) {
				Sequence.InsertData(effectNodes);
			}
		}
		
		public void Notify(string msg) {
            Vixen.Common.MessageStack.ScriptingRuntimeMessages.Enqueue(msg);
        }
		
		public EffectNode CreateEffectNode(string effectName, IEnumerable<UserScriptNode> targetNodes, TimeSpan timeSpan, params object[] args) {
			Guid effectId;
			if(_effects.TryGetValue(effectName, out effectId)) {
				IEffectModuleInstance effect = Vixen.Services.ApplicationServices.Get<IEffectModuleInstance>(effectId);
				effect.TimeSpan = timeSpan;
				effect.TargetNodes = targetNodes.Select(x => x.Node).ToArray();
				effect.ParameterValues = args;
				return new EffectNode(effect, TimeSpan.Zero);
			}

			return null;
		}
		
// == Effects ==

<#
	foreach(string effectName in Effects.Keys) {
		IEffectModuleDescriptor effect = Effects[effectName];
		string effectParameters =
			string.Join(", ",
			(from parameter in effect.Parameters
			select parameter.Type.ToString().Replace("Common.ValueTypes","ValueTypes") + " " + _Mangle(parameter.Name)).ToArray());
		string parameterNames =
			string.Join(", ",
			(from parameter in effect.Parameters
			select _Mangle(parameter.Name)).ToArray());
#>
		// Original name: <#=effect.EffectName#>
		public void <#=effectName#>(IEnumerable<UserScriptNode> targetNodes, TimeSpan timeSpan, <#=effectParameters#>) {
			_InvokeEffect("<#=effectName#>", targetNodes, timeSpan, <#=parameterNames#>);
		}

<# } #>

		// == Nodes ==
		
<#
	// This needs to match the node collection that the script created in its constructor.
	var nodes = VixenSystem.Nodes.ToArray();
	List<string> usedNames = new List<string>();
	for(int i=0; i < nodes.Length; i++) { #>
		// Original name: <#=nodes[i].Name#>
		public dynamic <#=_Fix(nodes[i].Name, usedNames)#> { 
			get { return _nodes[<#= i #>]; }
		}
<# } #>

		public UserScriptNode[] Nodes {
			get { return _nodes; }
		}

		private void _InvokeEffect(string effectName, IEnumerable<UserScriptNode> targetNodes, TimeSpan timeSpan, params object[] args) {
			Execute(CreateEffectNode(effectName, targetNodes, timeSpan, args));
		}
	}
}
