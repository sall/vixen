<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackgroundChunks" xml:space="preserve">
    <value>Controls the amount of background chunks.</value>
  </data>
  <data name="BackgroundSkips" xml:space="preserve">
    <value>Controls the amount of background skips.</value>
  </data>
  <data name="BaseBrightness" xml:space="preserve">
    <value>Controls the brightness of the base color of the effect.</value>
  </data>
  <data name="BaseColor" xml:space="preserve">
    <value>Controls the base color that will be used for the background of the effect.</value>
  </data>
  <data name="Blend" xml:space="preserve">
    <value>Applies the gradient blend vertically.</value>
  </data>
  <data name="Brightness" xml:space="preserve">
    <value>Controls the brightness of the effect.</value>
  </data>
  <data name="ButterflyType" xml:space="preserve">
    <value>Controls the type of pattern.</value>
  </data>
  <data name="CenterStop" xml:space="preserve">
    <value>Moves the text into view and stops it in the center.</value>
  </data>
  <data name="CenterText" xml:space="preserve">
    <value>Center each line of text instead of left justified.</value>
  </data>
  <data name="ChangePercent" xml:space="preserve">
    <value>Sets percentage of change.</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>Controls the color of the effect.</value>
  </data>
  <data name="ColorHandling" xml:space="preserve">
    <value>Controls how the color is handled.</value>
  </data>
  <data name="ColorScheme" xml:space="preserve">
    <value>Controls the color scheme.</value>
  </data>
  <data name="DefaultBrightness" xml:space="preserve">
    <value>Controls the default brightness of the inactive elements in the effect.</value>
  </data>
  <data name="Depth" xml:space="preserve">
    <value>Indicates how many levels deep the effect should be grouped.</value>
  </data>
  <data name="DeviationPercent" xml:space="preserve">
    <value>Sets percent of deviation.</value>
  </data>
  <data name="Direction" xml:space="preserve">
    <value>Controls the direction of the effect.</value>
  </data>
  <data name="EffectType" xml:space="preserve">
    <value>Controls the type of movement.</value>
  </data>
  <data name="Explosions" xml:space="preserve">
    <value>Controls how many explosions occur.</value>
  </data>
  <data name="ExtendPulseEnd" xml:space="preserve">
    <value>Extends the pulse to the end of the effect from beyond it's normal ending position. The extension will be at the ending color and ending value of the brightness intensity. If the intensity ends in zero, this will have no effect.</value>
  </data>
  <data name="ExtendPulseStart" xml:space="preserve">
    <value>Extends the pulse back to the start of the effect from it's normal starting position. The extension will be at the starting color and starting brightness intensity. If the intensity starts at zero, which is the default, this will have no effect.</value>
  </data>
  <data name="Filename" xml:space="preserve">
    <value>The selected file name.</value>
  </data>
  <data name="FitTime" xml:space="preserve">
    <value>Times the effect so that it will fit in the allotted time span.</value>
  </data>
  <data name="FlakeCount" xml:space="preserve">
    <value>Controls the amount of flakes.</value>
  </data>
  <data name="FlickerFrequency" xml:space="preserve">
    <value>Sets flicker frequency in changes per second.</value>
  </data>
  <data name="FlickerPercent" xml:space="preserve">
    <value>Sets percentage of flicker.</value>
  </data>
  <data name="Font" xml:space="preserve">
    <value>The text font.</value>
  </data>
  <data name="GifSpeed" xml:space="preserve">
    <value>Controls the speed at which a gif animates if the image is a animated gif.</value>
  </data>
  <data name="GradientLevelPair" xml:space="preserve">
    <value>Controls the color gradient and brightness curve that are associated together to provide the color(s) for the effect.</value>
  </data>
  <data name="GradientMode" xml:space="preserve">
    <value>Controls how the gradient is applied to the effect.</value>
  </data>
  <data name="GroupLevel" xml:space="preserve">
    <value>Controls the grouping together of elements that will be in the same state.</value>
  </data>
  <data name="Grow" xml:space="preserve">
    <value>Grow the legs of the spiral.</value>
  </data>
  <data name="Height" xml:space="preserve">
    <value>Controls the height of the fire.</value>
  </data>
  <data name="Highlight" xml:space="preserve">
    <value>Controls whether there are highlights added.</value>
  </data>
  <data name="HueShift" xml:space="preserve">
    <value>Controls the color of the fire.</value>
  </data>
  <data name="Interval" xml:space="preserve">
    <value>Specifies how often the effect should switch in milliseconds.</value>
  </data>
  <data name="IntervalSkip" xml:space="preserve">
    <value>Controls the offset into the color list for the alternate state in the effect. One is the default and would shift the colors back and forth by one.</value>
  </data>
  <data name="Iterations" xml:space="preserve">
    <value>Controls the number of times the pattern repeats over the timespan.</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Controls the location.</value>
  </data>
  <data name="MaxBrightness" xml:space="preserve">
    <value>Controls the maximum brightness of a pulse.</value>
  </data>
  <data name="MinBrightness" xml:space="preserve">
    <value>Controls the minimum brightness of a pulse.</value>
  </data>
  <data name="Orientation" xml:space="preserve">
    <value>Defines the direction of the strings and controls how the effect is oriented on the element.</value>
  </data>
  <data name="ParticleFade" xml:space="preserve">
    <value>Controls how fast the particles fade.</value>
  </data>
  <data name="Particles" xml:space="preserve">
    <value>Controls how many particles will be created.</value>
  </data>
  <data name="PixelsPerString" xml:space="preserve">
    <value>The count of pixels on each string.</value>
  </data>
  <data name="Position" xml:space="preserve">
    <value>Controls the centering of the text on the element.</value>
  </data>
  <data name="PulseDuration" xml:space="preserve">
    <value>Controls how long each pulse is in milliseconds.</value>
  </data>
  <data name="PulseOverlap" xml:space="preserve">
    <value>Controls how many milliseconds the individual pulses overlap.</value>
  </data>
  <data name="PulseShape" xml:space="preserve">
    <value>Controls the individual pulse shape.</value>
  </data>
  <data name="PulseSpinPercent" xml:space="preserve">
    <value>Controls how long each pulse is as a percentage of the spin.</value>
  </data>
  <data name="PulseType" xml:space="preserve">
    <value>Controls how individual pulses are applied across the effect.</value>
  </data>
  <data name="Repeat" xml:space="preserve">
    <value>Controls the number of times the color pattern repeats within the pattern.</value>
  </data>
  <data name="RevolutionCount" xml:space="preserve">
    <value>Controls how many revolutions of the spin will occur.</value>
  </data>
  <data name="RevolutionFrequency" xml:space="preserve">
    <value>Controls the frequency in Hz at which the spin occurs.</value>
  </data>
  <data name="RevolutionTime" xml:space="preserve">
    <value>Controls the duration in milliseconds at which the spin occurs.</value>
  </data>
  <data name="Rotation" xml:space="preserve">
    <value>The amount of twist in the spiral.</value>
  </data>
  <data name="ScalePercent" xml:space="preserve">
    <value>Controls the percent of the scaling to reduce the size of large images to fit.</value>
  </data>
  <data name="ScaleToGrid" xml:space="preserve">
    <value>Automatically sets the scaling to match the grid size.</value>
  </data>
  <data name="Setup" xml:space="preserve">
    <value />
  </data>
  <data name="Show3D" xml:space="preserve">
    <value>Adds a 3D effect.</value>
  </data>
  <data name="Shrink" xml:space="preserve">
    <value>Shrink the legs of the spiral.</value>
  </data>
  <data name="SnowflakeType" xml:space="preserve">
    <value>Controls the type of snowflake.</value>
  </data>
  <data name="SpinSpeedFormat" xml:space="preserve">
    <value>Controls how the individual spins occur.</value>
  </data>
  <data name="StaticColorIndicator" xml:space="preserve">
    <value>Indicates the color is a static color.</value>
  </data>
  <data name="StaticEffect" xml:space="preserve">
    <value>Indicates that the effect should be the same on all elements.</value>
  </data>
  <data name="StringCount" xml:space="preserve">
    <value>The count of strings the effect will use.</value>
  </data>
  <data name="TextBrightness" xml:space="preserve">
    <value>Controls the brightness of the text in the effect.</value>
  </data>
  <data name="TextLines" xml:space="preserve">
    <value>The text to be displayed.</value>
  </data>
  <data name="TextMode" xml:space="preserve">
    <value>Controls the orientation of the text lines.</value>
  </data>
  <data name="Thickness" xml:space="preserve">
    <value>Controls how thick the spiral leg is.</value>
  </data>
  <data name="TwinkleAvgPulseTime" xml:space="preserve">
    <value>Controls how long the averge pulse time is in the twinkle.</value>
  </data>
  <data name="TwinkleCoverage" xml:space="preserve">
    <value>Controls how much of the effect by percent is covered in twinkles.</value>
  </data>
  <data name="TwinkleDepth" xml:space="preserve">
    <value>Controls whether each individual element is twinkled independantly or all at once.</value>
  </data>
  <data name="TwinkleLevelVariation" xml:space="preserve">
    <value>Controls how much percent variation in the brightness level of each pulse in the twinkle.</value>
  </data>
  <data name="TwinklePulseTimeVariation" xml:space="preserve">
    <value>Controls how much percent variation in the time of each pulse in the twinkle.</value>
  </data>
  <data name="UseBaseColor" xml:space="preserve">
    <value>Indicates if a underlying base color should be used.</value>
  </data>
  <data name="Velocity" xml:space="preserve">
    <value>Controls the velocity of the particles.</value>
  </data>
  <data name="VerticalBlend" xml:space="preserve">
    <value>Changes the orientation of the gradient.</value>
  </data>
  <data name="WipeCount" xml:space="preserve">
    <value>Controls the number of passes the wipe makes.</value>
  </data>
  <data name="WipePulsePercent" xml:space="preserve">
    <value>Controls the length of the pulse as a percentage of the effect time.</value>
  </data>
  <data name="WipeType" xml:space="preserve">
    <value>Controls how the wipe behaves. Either by a count of passes, or by time related to pulse length.</value>
  </data>
  <data name="XOffset" xml:space="preserve">
    <value>Can help to adjust the position of the image. May not work in all cases.</value>
  </data>
  <data name="YOffset" xml:space="preserve">
    <value>Can help to adjust the position of the image. May not work in all cases.</value>
  </data>
</root>